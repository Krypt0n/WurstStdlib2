/**
    This package provides an Encoder/Decoder pair for the RFC 4648 flavour
    of the Base64 format, allowing you to serialize and deserialize arbitrary data.

    For more information about Base64, refer to:
    https://en.wikipedia.org/wiki/Base64

    For usage examples of these classes, you can look in `Base64Tests.wurst`.

    Base64Encoder:
        Internally, this class chunks data into strings of `maxChunkLength`.
        All produced strings will be of this length or less.

        To write data, use these provided methods:
            `pushByte()`
            `pushShort()`
            `pushInt()`

        After you are done writing, call:
            `encode()`
        This will run the encoding process of producing Base64-encoded strings.

        To extract these strings, use these provided methods:
            `hasChunk()`
            `popChunk()`

    Base64Decoder:
        This class takes chunks of Base64-encoded data with `pushChunk()`

        After you have populated the decoder with Base64 data, call `decode()`,
        this will process the input and put the decoder into read-mode.

        After this, you can extract your data using:
            `popByte()`
            `popShort()`
            `popInt()`
**/
package Base64

import LinkedList
import Bitwise
import StringUtils
import ByteBuffer
import Execute
import BigString

/**
    Specifies how many characters to encode per a single `execute()` call.
    This value has been tuned to work under all optimization settings and
    with stacktraces included.
**/
@configurable public constant ENCODES_PER_ROUND = 500
/**
    Specifies how many characters to decode per a single `execute()` call.
    This value has been tuned to work under all optimization settings and
    with stacktraces included.
**/
@configurable public constant DECODES_PER_ROUND = 500

int loopCounter = 0
int loopActions = 0

// RFC 4648 compliant Base64 charmap.
constant CHARMAP = [
    "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P",
    "Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f",
    "g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v",
    "w","x","y","z","0","1","2","3","4","5","6","7","8","9","+","/"
]

// RFC 4648 compliant Base64 reverse charmap.
constant REVERSE_CHARMAP = [
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54,
    55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2,
    3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
    20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30,
    31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
    48, 49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
]

public class Base64Encoder
    private BigString stringBuffer
    private var byteBuffer = new ByteBuffer

    construct(int maxChunkLength)
        this.stringBuffer = new BigString(maxChunkLength)

    ondestroy
        if stringBuffer != null
            destroy stringBuffer
        destroy byteBuffer

    private function append(string character)
        stringBuffer.appendChar(character)

    private function encodeSingle(int byte, int count)
        var remaining = byte

        for i = 0 to count
            let c = remaining.and32(compiletime("11111100 00000000 00000000".fromBitString())).shiftr(18)
            append(CHARMAP[c])
            remaining = remaining.shiftl(6)

    private function encode3()
        let b1 = byteBuffer.readByte()
        let b2 = byteBuffer.readByte()
        let b3 = byteBuffer.readByte()
        let data = b1.shiftl(16) + b2.shiftl(8) + b3
        encodeSingle(data, 3)

    private function encode2()
        let b1 = byteBuffer.readByte()
        let b2 = byteBuffer.readByte()
        let data = b1.shiftl(16) + b2.shiftl(8)
        encodeSingle(data, 2)
        append("=")

    private function encode1()
        let b1 = byteBuffer.readByte()
        var data = b1.shiftl(16)
        encodeSingle(data, 1)
        append("=")
        append("=")

    /**
        Runs the encoding process of converting the provided data into Base64-encoded strings.
    **/
    function encode()
        execute() ->
            byteBuffer.toReadMode()

            let byteCount = byteBuffer.getByteCount()

            let noPaddingWrites = (byteBuffer.getByteCount() div 3) - 1
            let padding = byteCount mod 3

            loopActions = noPaddingWrites
            loopCounter = 0
            
            executeWhile(ENCODES_PER_ROUND, () -> loopCounter <= loopActions) ->
                encode3()
                loopCounter++

            if padding == 2
                encode2()

            if padding == 1
                encode1()

    /** Pushes an unsigned byte to be serialized into Base64. **/
    function pushByte(int byte)
        byteBuffer.writeByte(byte)

    /** Pushes an unsigned short to be serialized into Base64. **/
    function pushShort(int short)
        byteBuffer.writeShort(short)

    /** Pushes a signed int to be serialized into Base64. **/
    function pushInt(int num)
        byteBuffer.writeInt(num)

    /** Checks if there are any unextracted chunks. **/
    function hasChunk() returns boolean
        return stringBuffer.hasData()

    /** Extracts a Base64-encoded string chunk. **/
    function popChunk() returns string
        return stringBuffer.read()

    /** Consumes this encoder and returns the underlying data as a BigString. **/
    function intoData() returns BigString
        let temp = stringBuffer
        stringBuffer = null
        destroy this
        return temp

function int.removeLastOctet() returns int
    return (this - (this div 0x1000000) * 0x1000000)

public class Base64Decoder
    private BigString stringBuffer
    private LinkedList<BigStringElement> chunkList
    private var byteBuffer = new ByteBuffer

    construct(BigString data)
        this.stringBuffer = data

    ondestroy
        if byteBuffer != null
            destroy byteBuffer

        if stringBuffer != null
            destroy stringBuffer

        if chunkList != null
            for elem in chunkList
                destroy elem

            destroy chunkList

    private function nextChar() returns int
        return stringBuffer.readSome(1).toChar().toInt()

    private function next3Bytes()
        var nextCharacter = nextChar()
        var data = 0
        var charAmount = 0

        if REVERSE_CHARMAP[nextCharacter] != -1
            data = REVERSE_CHARMAP[nextCharacter].shiftl(18)

        nextCharacter = nextChar()
        if REVERSE_CHARMAP[nextCharacter] != -1
            data = data + REVERSE_CHARMAP[nextCharacter].shiftl(12)
            charAmount++

        nextCharacter = nextChar()
        if REVERSE_CHARMAP[nextCharacter] != -1
            data = data + REVERSE_CHARMAP[nextCharacter].shiftl(6)
            charAmount++

        nextCharacter = nextChar()
        if REVERSE_CHARMAP[nextCharacter] != -1
            data = data + REVERSE_CHARMAP[nextCharacter]
            charAmount++
        
        while charAmount > 0
            byteBuffer.writeByte(data.toUnsigned().removeLastOctet().shiftr(16))
            data = data.shiftl(8)
            charAmount--

    /** Runs the decode process on provided input. **/
    function decode()
        if stringBuffer == null
            stringBuffer = new BigString(chunkList, BIGSTRING_MAX_CHUNK_LENGTH)
        else
            if chunkList != null
                destroy chunkList
        chunkList = null

        let count = (stringBuffer.length() div 4) - 1

        loopCounter = 0
        loopActions = count
        
        executeWhile(DECODES_PER_ROUND, () -> loopCounter <= loopActions) ->
            next3Bytes()
            loopCounter++
        byteBuffer.toReadMode()

    /** Returns the next 1 byte from the decoder as an unsigned byte. **/
    function popByte() returns int
        return byteBuffer.readByte()

    /** Returns the next 2 bytes from the decoder as an unsigned short. **/
    function popShort() returns int
        return byteBuffer.readShort()

    /** Returns the next 4 bytes from the decoder as a signed int. **/
    function popInt() returns int
        return byteBuffer.readInt()

    /** Returns the total amount of bytes in this decoder after the decoding process. **/
    function getByteCount() returns int
        return byteBuffer.getByteCount()
   
    /** Consumes this decoder and returns the underlying data as a ByteBuffer. **/
    function intoData() returns ByteBuffer
        let temp = byteBuffer
        byteBuffer = null
        destroy this
        return temp